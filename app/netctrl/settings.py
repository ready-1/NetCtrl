"""
Django settings for netctrl project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import warnings
import logging
from pathlib import Path

# Import the environment variable management module
from netctrl.env_config import get_env_var, is_placeholder, load_environment

# Configure settings logging
logger = logging.getLogger('netctrl.settings')

# Determine environment first - this affects validation requirements
ENVIRONMENT = get_env_var('ENVIRONMENT', default='development')
IS_PRODUCTION = ENVIRONMENT.lower() == 'production'
IS_TESTING = ENVIRONMENT.lower() == 'testing'

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env_var(
    'DJANGO_SECRET_KEY', 
    default="django-insecure-3^r@-ojml9!&-esnjq6+@e0$ne71i(8cok$rml7o#ixki*!+#k",
    required=IS_PRODUCTION
)

# Verify the secret key is not a default insecure key
if "django-insecure" in SECRET_KEY or is_placeholder(SECRET_KEY):
    if IS_PRODUCTION:
        raise RuntimeError(
            "Using insecure SECRET_KEY in production environment. "
            "Generate a proper secret key and set DJANGO_SECRET_KEY in your .env file."
        )
    else:
        warnings.warn(
            "Using insecure default SECRET_KEY. Set DJANGO_SECRET_KEY in your .env file.",
            UserWarning
        )

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env_var('DJANGO_DEBUG', default=not IS_PRODUCTION, var_type=bool)

# Safety check for production
if IS_PRODUCTION and DEBUG:
    warnings.warn(
        "DEBUG mode enabled in production environment. This is a security risk.",
        RuntimeWarning
    )

ALLOWED_HOSTS = get_env_var('DJANGO_ALLOWED_HOSTS', default=['localhost', '127.0.0.1'], var_type=list)


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Third-party apps
    "chunked_upload",
    "whitenoise.runserver_nostatic",
    
    # Local apps
    "cms.apps.CmsConfig",
    "network.apps.NetworkConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "netctrl.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "netctrl.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Use SQLite for development by default
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Use PostgreSQL if explicitly configured
if get_env_var('USE_POSTGRES', default=False, var_type=bool):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": get_env_var('POSTGRES_DB', default='netctrl_db'),
            "USER": get_env_var('POSTGRES_USER', default='netctrl_user'),
            "PASSWORD": get_env_var('POSTGRES_PASSWORD', default='netctrl_password'),
            "HOST": get_env_var('POSTGRES_HOST', default='postgres'),
            "PORT": get_env_var('POSTGRES_PORT', default='5432'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 9,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = get_env_var('STATIC_ROOT', default=os.path.join(BASE_DIR, 'staticfiles'))
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Media files (User uploads)
MEDIA_URL = "/media/"
MEDIA_ROOT = get_env_var('MEDIA_ROOT', default=os.path.join(BASE_DIR, 'media'))

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Authentication
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/cms/dashboard/'
LOGOUT_REDIRECT_URL = '/'

# Chunked Upload settings
CHUNKED_UPLOAD_PATH = 'uploads/chunks/'
CHUNKED_UPLOAD_MAX_BYTES = 5 * 1024 * 1024 * 1024  # 5GB
CHUNKED_UPLOAD_STORAGE_CLASS = 'django.core.files.storage.FileSystemStorage'
CHUNKED_UPLOAD_ABSTRACT_MODEL = False
CHUNKED_UPLOAD_COMPLETE_EXT = '.done'

# Logging - Integrate with our custom TCPSysLogHandler
LOG_LEVEL = get_env_var('LOG_LEVEL', default='INFO')
SYSLOG_HOST = get_env_var('SYSLOG_HOST', default=None)
SYSLOG_PORT = get_env_var('SYSLOG_PORT', default=5140, var_type=int)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': LOG_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'syslog': {
            'level': LOG_LEVEL,
            'class': 'netctrl.logging_config.TCPSysLogHandler',
            'formatter': 'verbose',
            'facility': 'local1',
            'address': (SYSLOG_HOST, SYSLOG_PORT) if SYSLOG_HOST else ('localhost', 601),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'syslog'] if SYSLOG_HOST else ['console'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'cms': {
            'handlers': ['console', 'syslog'] if SYSLOG_HOST else ['console'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'network': {
            'handlers': ['console', 'syslog'] if SYSLOG_HOST else ['console'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
        'netctrl': {
            'handlers': ['console', 'syslog'] if SYSLOG_HOST else ['console'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
    },
}

# Try to import our custom logging configuration
try:
    from netctrl.logging_config import TCPSysLogHandler
except ImportError:
    # Fall back to standard logging if custom handler is not available
    for logger_name, logger_config in LOGGING['loggers'].items():
        if 'syslog' in logger_config['handlers']:
            logger_config['handlers'].remove('syslog')
    
    # Add a warning about missing the custom handler
    import warnings
    warnings.warn("Custom TCPSysLogHandler not found. Falling back to console logging only.")

# GitHub Issue Reporter Configuration
APP_VERSION = '1.0.0'  # Update with your actual application version
GITHUB_TOKEN = get_env_var('GITHUB_TOKEN', default=None)
if not GITHUB_TOKEN:
    if DEBUG:
        warnings.warn(
            "GITHUB_TOKEN environment variable is not set. GitHub integration features will be disabled.",
            UserWarning
        )
    else:
        # In production, warn but don't fail the application
        warnings.warn(
            "GITHUB_TOKEN environment variable is not set in production. GitHub integration will be unavailable.",
            UserWarning
        )

GITHUB_REPOSITORY = get_env_var('GITHUB_REPOSITORY', default="ready-1/NetCtrl")
