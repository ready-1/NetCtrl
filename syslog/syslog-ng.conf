@version: 4.8
@include "scl.conf"

# Global options
options {
    chain_hostnames(no);
    create_dirs(yes);
    keep_hostname(yes);
    log_fifo_size(5000);
    time_reopen(10);
    use_dns(no);
    threaded(yes);
};

# Sources
source s_local {
    internal();
};

source s_network {
    network(
        transport("udp")
        port(514)
    );
    network(
        transport("tcp")
        port(601)
    );
};

# Template for structured logging
template t_standard {
    template("${ISODATE} [${LEVEL}] ${PROGRAM}[${PID}]: ${MSGHDR}${MSG}\n");
    template_escape(no);
};

# Filters by service
filter f_nginx { program("nginx"); };
filter f_django { program("django") or program("gunicorn"); };
filter f_postgres { program("postgres"); };
filter f_error { level(err..emerg); };

# Destinations
destination d_gelf {
    network(
        "logviewer"
        port(12201)
        transport("udp")
        template("$(format-json --scope rfc5424 --scope nv-pairs --rekey .* --shift 1 --add-prefix _ message=${MSG} host=${HOST})\n")
    );
};

destination d_nginx {
    file("/var/log/nginx.log" template(t_standard));
};

destination d_django {
    file("/var/log/django.log" template(t_standard));
};

destination d_postgres {
    file("/var/log/postgres.log" template(t_standard));
};

destination d_errors {
    file("/var/log/errors.log" template(t_standard));
};

destination d_all {
    file("/var/log/all.log" template(t_standard));
};

# Log paths
log { source(s_local); source(s_network); filter(f_nginx); destination(d_nginx); };
log { source(s_local); source(s_network); filter(f_django); destination(d_django); };
log { source(s_local); source(s_network); filter(f_postgres); destination(d_postgres); };
log { source(s_local); source(s_network); filter(f_error); destination(d_errors); };
log { source(s_local); source(s_network); destination(d_all); };

# Send all logs to Graylog in GELF format
log { source(s_local); source(s_network); destination(d_gelf); };
